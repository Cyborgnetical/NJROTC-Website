---
import Layout from "../../../layouts/GlobalHTMLLayout.astro";

interface CalendarItem {
  day: number;
  month: number;
}

type EventCallback = (event: MouseEvent) => void;

const handleEvent = (day: number, month: number): EventCallback => {
  return (event: MouseEvent) => {
    console.log(`Clicked on ${day}/${month}`);
    // Add your event logic here
  };
};

// Function to get the current day of the week
function getCurrentDayOfWeek(): string {
  const today = new Date();
  const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  return dayNames[today.getDay()];
}

// Function to get the current day of the month
function getCurrentDayOfMonth(): number {
  const today = new Date();
  return today.getDate();
}

// Create grid items dynamically
function createGridItems(): void {
  const container = document.querySelector('.grid-container');
  
  for (let i = 1; i <= 35; i++) { // 7 columns * 5 rows = 35 items
    const item = document.createElement('div');
    item.className = 'grid-item';
    
    const calendarItem: CalendarItem = {
      day: i % 7 + 1,
      month: Math.floor((i - 1) / 7) + 1
    };

    item.textContent = `${calendarItem.day}/${calendarItem.month}`;

    // Set border color based on current day
    const currentDay = getCurrentDayOfWeek();
    const currentDayOfMonth = getCurrentDayOfMonth();
    
    if (i === currentDayOfMonth) {
      item.style.border = '1px solid #00ff00';
      item.style.color = 'black';
    } else {
      item.style.border = '1px solid #ff0000';
      item.style.color = 'black';
    }
    
    item.addEventListener('click', handleEvent(calendarItem.day, calendarItem.month));
    container.appendChild(item);
  }
}

// Initialize the grid
document.addEventListener('DOMContentLoaded', createGridItems);

---

<Layout name="Calendar">
            <div class="grid-container"></div>

    </div>
    <style>
        .grid-container {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            grid-template-rows: repeat(5, 1fr);
            gap: 10px;
            padding: 20px;

            height: 25vw;
            width: 45vw;

            position: relative;
            left: 26.4%;
            top: 39.3%;
            color: black;

            
            z-index: 999;
        }

        .grid-item {
            background-color: #f0f0f0;
            border: 1px solid transparent;

            color: black;

            position: absolute;
        }
    </style>
</Layout>
    <script lang="js">
// Function to get the current day of the week
function getCurrentDayOfWeek() {
    const today = new Date();
    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    return dayNames[today.getDay()];
}

// Function to get the current day of the month
function getCurrentDayOfMonth() {
    const today = new Date();
    return today.getDate();
}

// Create grid items dynamically
function createGridItems() {
    const container = document.querySelector('.grid-container');
    
    for (let i = 1; i <= 35; i++) { // 7 columns * 5 rows = 35 items
        const item = document.createElement('div');
        item.className = 'grid-item';
        item.textContent = i;


        
        // Set border color based on current day
        const currentDay = getCurrentDayOfWeek();
        const currentDayOfMonth = getCurrentDayOfMonth();
        
        if (i === currentDayOfMonth) {
            item.style.border = '1px solid #00ff00';
            item.style.color = 'black';
        } else {
            item.style.border = '1px solid #ff0000';
            item.style.color = 'black';
        }
        
        container.appendChild(item);
    }
}

// Initialize the grid
document.addEventListener('DOMContentLoaded', createGridItems);

    </script>


